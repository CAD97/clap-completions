---
source: tests/crates.rs
expression: get_clap_help(&mut app)
---
bindgen 
Generates Rust bindings from C/C++ headers.

USAGE:
    bindgen [FLAGS] [OPTIONS] <header> -- <clang-args>...

ARGS:
    <header>           C or C++ header file
    <clang-args>...    

OPTIONS:
        --allowlist-file <path>
            Allowlist all contents of <path>.

        --allowlist-function <regex>
            Allowlist all the free-standing functions matching <regex>. Other non-allowlisted
            functions will not be generated.

        --allowlist-type <regex>
            Only generate types matching <regex>. Other non-allowlisted types will not be generated.

        --allowlist-var <regex>
            Allowlist all the free-standing variables matching <regex>. Other non-allowlisted
            variables will not be generated.

        --anon-fields-prefix <prefix>
            Use the given prefix for the anon fields. [default: __bindgen_anon_]

        --bitfield-enum <regex>
            Mark any enum whose name matches <regex> as a set of bitfield flags.

        --block-extern-crate
            Use extern crate instead of use for block.

        --blocklist-file <path>
            Mark all contents of <path> as hidden.

        --blocklist-function <function>
            Mark <function> as hidden.

        --blocklist-item <item>
            Mark <item> as hidden.

        --blocklist-type <type>
            Mark <type> as hidden.

        --builtins
            Output bindings for builtin definitions, e.g. __builtin_va_list.

        --c-naming
            Generate types with C style naming.

        --conservative-inline-namespaces
            Conservatively generate inline namespaces to avoid name conflicts.

        --constified-enum <regex>
            Mark any enum whose name matches <regex> as a series of constants.

        --constified-enum-module <regex>
            Mark any enum whose name matches <regex> as a module of constants.

        --ctypes-prefix <prefix>
            Use the given prefix before raw types instead of ::std::os::raw.

        --default-alias-style <variant>
            The default style of code used to generate typedefs. [default: type_alias] [possible
            values: type_alias, new_type, new_type_deref]

        --default-enum-style <variant>
            The default style of code used to generate enums. [default: consts] [possible values:
            consts, moduleconsts, bitfield, newtype, rust, rust_non_exhaustive]

        --default-macro-constant-type <variant>
            The default signed/unsigned type for C macro constants. [default: unsigned] [possible
            values: signed, unsigned]

        --depfile <depfile>
            Path to write depfile to

        --disable-header-comment
            Suppress insertion of bindgen's version identifier into generated bindings.

        --disable-name-namespacing
            Disable namespacing via mangling, causing bindgen to generate names like "Baz" instead
            of "foo_bar_Baz" for an input name "foo::bar::Baz".

        --disable-nested-struct-naming
            Disable nested struct naming, causing bindgen to generate names like "bar" instead of
            "foo_bar" for a nested definition "struct foo { struct bar { } b; };".

        --disable-untagged-union
            Disable support for native Rust unions.

        --distrust-clang-mangling
            Do not trust the libclang-provided mangling

        --dump-preprocessed-input
            Preprocess and dump the input header files to disk. Useful when debugging bindgen, using
            C-Reduce, or when filing issues. The resulting file will be named something like
            `__bindgen.i` or `__bindgen.ii`.

        --dynamic-link-require-all
            Require successful linkage to all functions in the library.

        --dynamic-loading <dynamic-loading>
            Use dynamic loading mode with the given library name.

        --emit-clang-ast
            Output the Clang AST for debugging purposes.

        --emit-ir
            Output our internal IR for debugging purposes.

        --emit-ir-graphviz <path>
            Dump graphviz dot file.

        --enable-cxx-namespaces
            Enable support for C++ namespaces.

        --enable-function-attribute-detection
            Enables detecting unexposed attributes in functions (slow).
                                   Used to generate #[must_use] annotations.

        --explicit-padding
            Always output explicit padding fields.

        --fit-macro-constant-types
            Try to fit macro constants into types smaller than u32/i32

        --generate <generate>
            Generate only given items, split by commas. Valid values are "functions","types",
            "vars", "methods", "constructors" and "destructors".

        --generate-block
            Generate block signatures instead of void pointers.

        --generate-inline-functions
            Generate inline functions.

    -h, --help
            Print help information

        --ignore-functions
            Do not generate bindings for functions or methods. This is useful when you only care
            about struct layouts.

        --ignore-methods
            Do not generate bindings for methods.

        --impl-debug
            Create Debug implementation, if it can not be derived automatically.

        --impl-partialeq
            Create PartialEq implementation, if it can not be derived automatically.

        --module-raw-line <module-name> <raw-line>
            Add a raw line of Rust code to a given module.

        --must-use-type <regex>
            Add #[must_use] annotation to types matching <regex>.

        --new-type-alias <regex>
            Mark any typedef alias whose name matches <regex> to have a new type generated for it.

        --new-type-alias-deref <regex>
            Mark any typedef alias whose name matches <regex> to have a new type with Deref and
            DerefMut to the inner type.

        --newtype-enum <regex>
            Mark any enum whose name matches <regex> as a newtype.

        --no-convert-floats
            Do not automatically convert floats to f32/f64.

        --no-copy <regex>
            Avoid deriving Copy for types matching <regex>.

        --no-debug <regex>
            Avoid deriving Debug for types matching <regex>.

        --no-default <regex>
            Avoid deriving/implement Default for types matching <regex>.

        --no-derive-copy
            Avoid deriving Copy on any type.

        --no-derive-debug
            Avoid deriving Debug on any type.

        --no-doc-comments
            Avoid including doc comments in the output, see:
            https://github.com/rust-lang/rust-bindgen/issues/426

        --no-hash <regex>
            Avoid deriving Hash for types matching <regex>.

        --no-include-path-detection
            Do not try to detect default include paths

        --no-layout-tests
            Avoid generating layout tests for any type.

        --no-partialeq <regex>
            Avoid deriving PartialEq for types matching <regex>.

        --no-prepend-enum-name
            Do not prepend the enum name to constant or newtype variants.

        --no-record-matches
            Do not record matching items in the regex sets. This disables reporting of unused items.

        --no-recursive-allowlist
            Disable allowlisting types recursively. This will cause bindgen to emit Rust code that
            won't compile! See the `bindgen::Builder::allowlist_recursively` method's documentation
            for details.

        --no-rustfmt-bindings
            Do not format the generated bindings with rustfmt.

        --normal-alias <regex>
            Mark any typedef alias whose name matches <regex> to use normal type aliasing.

    -o, --output <output>
            Write Rust bindings to <output>.

        --objc-extern-crate
            Use extern crate instead of use for objc.

        --opaque-type <type>
            Mark <type> as opaque.

        --raw-line <raw-line>
            Add a raw line of Rust code at the beginning of output.

        --respect-cxx-access-specs
            Makes generated bindings `pub` only for items if the items are publically accessible in
            C++.

        --rust-target <rust-target>
            Version of the Rust compiler to target. Valid options are: ["1.0", "1.17", "1.19",
            "1.20", "1.21", "1.25", "1.26", "1.27", "1.28", "1.30", "1.33", "1.36", "1.40", "1.47"].
            Defaults to "1.47".

        --rustfmt-bindings
            Format the generated bindings with rustfmt. DEPRECATED: --rustfmt-bindings is now
            enabled by default. Disable with --no-rustfmt-bindings.

        --rustfmt-configuration-file <path>
            The absolute path to the rustfmt configuration file. The configuration file will be used
            for formatting the bindings. This parameter is incompatible with --no-rustfmt-bindings.

        --rustified-enum <regex>
            Mark any enum whose name matches <regex> as a Rust enum.

        --size_t-is-usize
            Translate size_t to usize.

        --time-phases
            Time the different bindgen phases and print to stderr

        --translate-enum-integer-types
            Always translate enum integer types to native Rust integer types.

        --unstable-rust
            Generate unstable Rust code (deprecated; use --rust-target instead).

        --use-array-pointers-in-arguments
            Use `*const [T; size]` instead of `*const T` for C arrays

        --use-core
            Use types from Rust core instead of std.

        --use-msvc-mangling
            MSVC C++ ABI mangling. DEPRECATED: Has no effect.

        --verbose
            Print verbose error messages.

        --version
            Prints the version, and exits

        --vtable-generation
            Enables generation of vtable functions.

        --wasm-import-module-name <name>
            The name to be used in a #[link(wasm_import_module = ...)] statement

        --with-derive-default
            Derive Default on any type.

        --with-derive-eq
            Derive eq on any type. Enable this option also enables --with-derive-partialeq

        --with-derive-hash
            Derive hash on any type.

        --with-derive-ord
            Derive ord on any type. Enable this option also enables --with-derive-partialord

        --with-derive-partialeq
            Derive partialeq on any type.

        --with-derive-partialord
            Derive partialord on any type.


